#ifndef SHADER_H
#define SHADER_H

//*********************着色器选择***************
#define MODE_POINTCLOUD     0
#define MODE_POINTPICKED    1
#define MODE_COORDS         2
#define MODE_GRID           3
#define MODE_ORIGIN         4
#define MODE_POSE           5
#define MODE_PATH           6
#define MODE_PRIOR          7
//*************顶点属性配置/绘制模式选择**********
#define MODE_SET_ATTRIB     1
#define MODE_PAINT          0
//********************着色器数量****************
const GLuint NumVertexShader = 8;       //顶点着色器
const GLuint NumFragmentShader = 8;     //片断着色器
const GLuint NumShaderProgram = 8;      //着色器程序
const GLuint NumVAO = 8;                //顶点数组对象
const GLuint NumVBO = 8;                //顶点数组缓冲对象
const GLuint NumEBO = 3;                //索引缓冲对象
/*******************************************************************************
 * 着色器源码
 ******************************************************************************/
/*********************************显示点云**************************************/
const GLchar *vertexShaderSource =
        "#version 430 core\n"
        "layout(location = 0) in vec3 vPosition;\n"
        "layout(location = 1) in vec3 Color;\n"
        "uniform mat4 model;\n"
        "uniform mat4 view;\n"
        "uniform mat4 projection;\n"
        "out vec3 oColor;\n"
        "void main()\n"
        "{\n"
            "oColor = Color;\n"
            "gl_Position = projection * view * model * vec4(vPosition, 1.0);\n"
        "}\n";

const GLchar *fragmentShaderSource =
        "#version 430 core\n"
        "out vec4 fColor;\n"
        "in vec3 oColor;\n"
        "void main()\n"
        "{\n"
            "fColor = vec4(oColor, 1.0f);\n"
        "}\n";
/*********************************显示拾取点**************************************/
const GLchar *vertexShaderSource1 =
        "#version 430 core\n"
        "layout(location = 0) in vec3 vPosition;\n"
        "layout(location = 1) in vec3 Color;\n"
        "uniform mat4 modelPicking;\n"
        "uniform mat4 viewPicking;\n"
        "uniform mat4 projectionPicking;\n"
        "out vec3 oColor;\n"
        "void main()\n"
        "{\n"
            "oColor = Color;\n"
            "gl_Position = projectionPicking * viewPicking * modelPicking * vec4(vPosition, 1.0);\n"
        "}\n";

const GLchar *fragmentShaderSource1 =
        "#version 430 core\n"
        "out vec4 fColor;\n"
        "in vec3 oColor;\n"
        "void main()\n"
        "{\n"
            "fColor = vec4(oColor, 1.0f);\n"
        "}\n";
/*********************************显示坐标**************************************/
const GLchar *vertexShaderSource2 =
        "#version 430 core\n"
        "layout(location = 0) in vec3 vPosition;\n"
        "layout(location = 1) in vec3 Color;\n"
        "out vec3 oColor;\n"
        "uniform mat4 modelCoor;\n"
        "uniform mat4 viewCoor;\n"
        "uniform mat4 projectionCoor;\n"
        "void main()\n"
        "{\n"
            "oColor = Color;\n"
            "gl_Position = projectionCoor * viewCoor * modelCoor * vec4(vPosition, 1.0);\n"
        "}\n";

const GLchar *fragmentShaderSource2 =
        "#version 430 core\n"
        "in vec3 oColor;\n"
        "out vec4 fColor;\n"
        "void main()\n"
        "{\n"
            "fColor = vec4(oColor, 1.0);\n"
        "}\n";

/*********************************显示网格**************************************/
const GLchar *vertexShaderSource3 =
        "#version 430 core\n"
        "layout(location = 0) in vec3 vPosition;\n"
        "uniform mat4 modelGrid;\n"
        "uniform mat4 viewGrid;\n"
        "uniform mat4 projectionGrid;\n"
        "void main()\n"
        "{\n"
            "gl_Position = projectionGrid * viewGrid * modelGrid * vec4(vPosition, 1.0);\n"
        "}\n";

const GLchar *fragmentShaderSource3 =
        "#version 430 core\n"
        "out vec4 fColor;\n"
        "void main()\n"
        "{\n"
            "fColor = vec4(0.1f, 0.1f, 0.1f, 1.0f);\n"
        "}\n";

/*********************************显示坐标原点**************************************/
const GLchar *vertexShaderSource4 =
        "#version 430 core\n"
        "layout(location = 0) in vec3 vPosition;\n"
        "uniform mat4 modelOrigin;\n"
        "uniform mat4 viewOrigin;\n"
        "uniform mat4 projectionOrigin;\n"
        "void main()\n"
        "{\n"
            "gl_Position = projectionOrigin * viewOrigin * modelOrigin * vec4(vPosition, 1.0);\n"
        "}\n";

const GLchar *fragmentShaderSource4 =
        "#version 430 core\n"
        "out vec4 fColor;\n"
        "void main()\n"
        "{\n"
            "fColor = vec4(1.0f, 1.0f, 0.0f, 1.0f);\n"
        "}\n";

/*********************************显示机器人位姿**************************************/
const GLchar *vertexShaderSource5 =
        "#version 430 core\n"
        "layout(location = 0) in vec3 vPosition;\n"
        "layout(location = 1) in vec3 Color;\n"
        "uniform mat4 modelPose;\n"
        "uniform mat4 viewPose;\n"
        "uniform mat4 projectionPose;\n"
        "out vec3 oColor;\n"
        "void main()\n"
        "{\n"
            "oColor = Color;\n"
            "gl_Position = projectionPose * viewPose * modelPose * vec4(vPosition, 1.0);\n"
        "}\n";

const GLchar *fragmentShaderSource5 =
        "#version 430 core\n"
        "out vec4 fColor;\n"
        "in vec3 oColor;\n"
        "void main()\n"
        "{\n"
            "fColor = vec4(oColor, 1.0f);\n"
        "}\n";

/*********************************显示选取路径**************************************/
const GLchar *vertexShaderSource6 =
        "#version 430 core\n"
        "layout(location = 0) in vec3 vPosition;\n"
        "uniform mat4 modelPath;\n"
        "uniform mat4 viewPath;\n"
        "uniform mat4 projectionPath;\n"
        "void main()\n"
        "{\n"
            "gl_Position = projectionPath * viewPath * modelPath * vec4(vPosition, 1.0);\n"
        "}\n";

const GLchar *fragmentShaderSource6 =
        "#version 430 core\n"
        "out vec4 fColor;\n"
        "void main()\n"
        "{\n"
            "fColor = vec4(0.0f, 0.0f, 1.0f, 1.0f);\n"
        "}\n";

/*********************************显示先验地图**************************************/
const GLchar *vertexShaderSource7 =
        "#version 430 core\n"
        "layout(location = 0) in vec3 vPosition;\n"
        "layout(location = 1) in vec3 Color;\n"
        "uniform mat4 modelPrior;\n"
        "uniform mat4 viewPrior;\n"
        "uniform mat4 projectionPrior;\n"
        "out vec3 oColor;\n"
        "void main()\n"
        "{\n"
            "oColor = Color;\n"
            "gl_Position = projectionPrior * viewPrior * modelPrior * vec4(vPosition, 1.0);\n"
        "}\n";

const GLchar *fragmentShaderSource7 =
        "#version 430 core\n"
        "out vec4 fColor;\n"
        "in vec3 oColor;\n"
        "void main()\n"
        "{\n"
            "fColor = vec4(oColor, 1.0f);\n"
        "}\n";



/************Color Table********************/
const float PesudoPalette[][3] = {
    1.00f, 0.00f, 0.00f,  //红
    1.00f, 0.02f, 0.00f,
    1.00f, 0.04f, 0.00f,
    1.00f, 0.06f, 0.00f,
    1.00f, 0.08f, 0.00f,
    1.00f, 0.10f, 0.00f,
    1.00f, 0.12f, 0.00f,
    1.00f, 0.14f, 0.00f,
    1.00f, 0.16f, 0.00f,
    1.00f, 0.18f, 0.00f,
    1.00f, 0.20f, 0.00f,
    1.00f, 0.22f, 0.00f,
    1.00f, 0.24f, 0.00f,
    1.00f, 0.26f, 0.00f,
    1.00f, 0.28f, 0.00f,
    1.00f, 0.30f, 0.00f,
    1.00f, 0.32f, 0.00f,
    1.00f, 0.34f, 0.00f,
    1.00f, 0.36f, 0.00f,
    1.00f, 0.38f, 0.00f,
    1.00f, 0.40f, 0.00f,
    1.00f, 0.42f, 0.00f,
    1.00f, 0.44f, 0.00f,
    1.00f, 0.46f, 0.00f,
    1.00f, 0.48f, 0.00f,
    1.00f, 0.50f, 0.00f,
    1.00f, 0.52f, 0.00f,
    1.00f, 0.54f, 0.00f,
    1.00f, 0.56f, 0.00f,
    1.00f, 0.58f, 0.00f,
    1.00f, 0.60f, 0.00f,
    1.00f, 0.62f, 0.00f,
    1.00f, 0.64f, 0.00f,
    1.00f, 0.66f, 0.00f,
    1.00f, 0.68f, 0.00f,
    1.00f, 0.70f, 0.00f,
    1.00f, 0.72f, 0.00f,
    1.00f, 0.74f, 0.00f,
    1.00f, 0.76f, 0.00f,
    1.00f, 0.78f, 0.00f,
    1.00f, 0.80f, 0.00f,
    1.00f, 0.82f, 0.00f,
    1.00f, 0.84f, 0.00f,
    1.00f, 0.86f, 0.00f,
    1.00f, 0.88f, 0.00f,
    1.00f, 0.90f, 0.00f,
    1.00f, 0.92f, 0.00f,
    1.00f, 0.94f, 0.00f,
    1.00f, 0.96f, 0.00f,
    1.00f, 0.98f, 0.00f,
    1.00f, 1.00f, 0.00f,  //黄


    0.98f, 1.00f, 0.00f,
    0.96f, 1.00f, 0.00f,
    0.94f, 1.00f, 0.00f,
    0.92f, 1.00f, 0.00f,
    0.90f, 1.00f, 0.00f,
    0.88f, 1.00f, 0.00f,
    0.86f, 1.00f, 0.00f,
    0.84f, 1.00f, 0.00f,
    0.82f, 1.00f, 0.00f,
    0.80f, 1.00f, 0.00f,
    0.78f, 1.00f, 0.00f,
    0.76f, 1.00f, 0.00f,
    0.74f, 1.00f, 0.00f,
    0.72f, 1.00f, 0.00f,
    0.70f, 1.00f, 0.00f,
    0.68f, 1.00f, 0.00f,
    0.66f, 1.00f, 0.00f,
    0.64f, 1.00f, 0.00f,
    0.62f, 1.00f, 0.00f,
    0.60f, 1.00f, 0.00f,
    0.58f, 1.00f, 0.00f,
    0.56f, 1.00f, 0.00f,
    0.54f, 1.00f, 0.00f,
    0.52f, 1.00f, 0.00f,
    0.50f, 1.00f, 0.00f,
    0.48f, 1.00f, 0.00f,
    0.46f, 1.00f, 0.00f,
    0.44f, 1.00f, 0.00f,
    0.42f, 1.00f, 0.00f,
    0.40f, 1.00f, 0.00f,
    0.38f, 1.00f, 0.00f,
    0.36f, 1.00f, 0.00f,
    0.34f, 1.00f, 0.00f,
    0.32f, 1.00f, 0.00f,
    0.30f, 1.00f, 0.00f,
    0.28f, 1.00f, 0.00f,
    0.26f, 1.00f, 0.00f,
    0.24f, 1.00f, 0.00f,
    0.22f, 1.00f, 0.00f,
    0.20f, 1.00f, 0.00f,
    0.18f, 1.00f, 0.00f,
    0.16f, 1.00f, 0.00f,
    0.14f, 1.00f, 0.00f,
    0.12f, 1.00f, 0.00f,
    0.10f, 1.00f, 0.00f,
    0.08f, 1.00f, 0.00f,
    0.06f, 1.00f, 0.00f,
    0.04f, 1.00f, 0.00f,
    0.02f, 1.00f, 0.00f,
    0.00f, 1.00f, 0.00f,  //绿


    0.00f, 1.00f, 0.02f,
    0.00f, 1.00f, 0.04f,
    0.00f, 1.00f, 0.06f,
    0.00f, 1.00f, 0.08f,
    0.00f, 1.00f, 0.10f,
    0.00f, 1.00f, 0.12f,
    0.00f, 1.00f, 0.14f,
    0.00f, 1.00f, 0.16f,
    0.00f, 1.00f, 0.18f,
    0.00f, 1.00f, 0.20f,
    0.00f, 1.00f, 0.22f,
    0.00f, 1.00f, 0.24f,
    0.00f, 1.00f, 0.26f,
    0.00f, 1.00f, 0.28f,
    0.00f, 1.00f, 0.30f,
    0.00f, 1.00f, 0.32f,
    0.00f, 1.00f, 0.34f,
    0.00f, 1.00f, 0.36f,
    0.00f, 1.00f, 0.38f,
    0.00f, 1.00f, 0.40f,
    0.00f, 1.00f, 0.42f,
    0.00f, 1.00f, 0.44f,
    0.00f, 1.00f, 0.46f,
    0.00f, 1.00f, 0.48f,
    0.00f, 1.00f, 0.50f,
    0.00f, 1.00f, 0.52f,
    0.00f, 1.00f, 0.54f,
    0.00f, 1.00f, 0.56f,
    0.00f, 1.00f, 0.58f,
    0.00f, 1.00f, 0.60f,
    0.00f, 1.00f, 0.62f,
    0.00f, 1.00f, 0.64f,
    0.00f, 1.00f, 0.66f,
    0.00f, 1.00f, 0.68f,
    0.00f, 1.00f, 0.70f,
    0.00f, 1.00f, 0.72f,
    0.00f, 1.00f, 0.74f,
    0.00f, 1.00f, 0.76f,
    0.00f, 1.00f, 0.78f,
    0.00f, 1.00f, 0.80f,
    0.00f, 1.00f, 0.82f,
    0.00f, 1.00f, 0.84f,
    0.00f, 1.00f, 0.86f,
    0.00f, 1.00f, 0.88f,
    0.00f, 1.00f, 0.90f,
    0.00f, 1.00f, 0.92f,
    0.00f, 1.00f, 0.94f,
    0.00f, 1.00f, 0.96f,
    0.00f, 1.00f, 0.98f,
    0.00f, 1.00f, 1.00f,  //青

    0.00f, 0.98f, 1.00f,
    0.00f, 0.96f, 1.00f,
    0.00f, 0.94f, 1.00f,
    0.00f, 0.92f, 1.00f,
    0.00f, 0.90f, 1.00f,
    0.00f, 0.88f, 1.00f,
    0.00f, 0.86f, 1.00f,
    0.00f, 0.84f, 1.00f,
    0.00f, 0.82f, 1.00f,
    0.00f, 0.80f, 1.00f,
    0.00f, 0.78f, 1.00f,
    0.00f, 0.76f, 1.00f,
    0.00f, 0.74f, 1.00f,
    0.00f, 0.72f, 1.00f,
    0.00f, 0.70f, 1.00f,
    0.00f, 0.68f, 1.00f,
    0.00f, 0.66f, 1.00f,
    0.00f, 0.64f, 1.00f,
    0.00f, 0.62f, 1.00f,
    0.00f, 0.60f, 1.00f,
    0.00f, 0.58f, 1.00f,
    0.00f, 0.56f, 1.00f,
    0.00f, 0.54f, 1.00f,
    0.00f, 0.52f, 1.00f,
    0.00f, 0.50f, 1.00f,
    0.00f, 0.48f, 1.00f,
    0.00f, 0.46f, 1.00f,
    0.00f, 0.44f, 1.00f,
    0.00f, 0.42f, 1.00f,
    0.00f, 0.40f, 1.00f,
    0.00f, 0.38f, 1.00f,
    0.00f, 0.36f, 1.00f,
    0.00f, 0.34f, 1.00f,
    0.00f, 0.32f, 1.00f,
    0.00f, 0.30f, 1.00f,
    0.00f, 0.28f, 1.00f,
    0.00f, 0.26f, 1.00f,
    0.00f, 0.24f, 1.00f,
    0.00f, 0.22f, 1.00f,
    0.00f, 0.20f, 1.00f,
    0.00f, 0.18f, 1.00f,
    0.00f, 0.16f, 1.00f,
    0.00f, 0.14f, 1.00f,
    0.00f, 0.12f, 1.00f,
    0.00f, 0.10f, 1.00f,
    0.00f, 0.08f, 1.00f,
    0.00f, 0.06f, 1.00f,
    0.00f, 0.04f, 1.00f,
    0.00f, 0.02f, 1.00f,
    0.00f, 0.00f, 1.00f,  //蓝


    0.02f, 0.00f, 1.00f,
    0.04f, 0.00f, 1.00f,
    0.06f, 0.00f, 1.00f,
    0.08f, 0.00f, 1.00f,
    0.10f, 0.00f, 1.00f,
    0.12f, 0.00f, 1.00f,
    0.14f, 0.00f, 1.00f,
    0.16f, 0.00f, 1.00f,
    0.18f, 0.00f, 1.00f,
    0.20f, 0.00f, 1.00f,
    0.22f, 0.00f, 1.00f,
    0.24f, 0.00f, 1.00f,
    0.26f, 0.00f, 1.00f,
    0.28f, 0.00f, 1.00f,
    0.30f, 0.00f, 1.00f,
    0.32f, 0.00f, 1.00f,
    0.34f, 0.00f, 1.00f,
    0.36f, 0.00f, 1.00f,
    0.38f, 0.00f, 1.00f,
    0.40f, 0.00f, 1.00f,
    0.42f, 0.00f, 1.00f,
    0.44f, 0.00f, 1.00f,
    0.46f, 0.00f, 1.00f,
    0.48f, 0.00f, 1.00f,
    0.50f, 0.00f, 1.00f,
    0.52f, 0.00f, 1.00f,
    0.54f, 0.00f, 1.00f,
    0.56f, 0.00f, 1.00f,
    0.58f, 0.00f, 1.00f,
    0.60f, 0.00f, 1.00f,
    0.62f, 0.00f, 1.00f,
    0.64f, 0.00f, 1.00f,
    0.66f, 0.00f, 1.00f,
    0.68f, 0.00f, 1.00f,
    0.70f, 0.00f, 1.00f,
    0.72f, 0.00f, 1.00f,
    0.74f, 0.00f, 1.00f,
    0.76f, 0.00f, 1.00f,
    0.78f, 0.00f, 1.00f,
    0.80f, 0.00f, 1.00f,
    0.82f, 0.00f, 1.00f,
    0.84f, 0.00f, 1.00f,
    0.86f, 0.00f, 1.00f,
    0.88f, 0.00f, 1.00f,
    0.90f, 0.00f, 1.00f,
    0.92f, 0.00f, 1.00f,
    0.94f, 0.00f, 1.00f,
    0.96f, 0.00f, 1.00f,
    0.98f, 0.00f, 1.00f,
    1.00f, 0.00f, 1.00f  //紫

};

/*
const float PesudoPalette[][3] = {
    0.000000f, 0.000000f, 1.000000f,
    0.003922f, 0.007843f, 0.996078f,
    0.007843f, 0.015686f, 0.992157f,
    0.011765f, 0.023529f, 0.988235f,
    0.015686f, 0.031373f, 0.984314f,
    0.019608f, 0.039216f, 0.980392f,
    0.023529f, 0.047059f, 0.976471f,
    0.027451f, 0.054902f, 0.972549f,
    0.031373f, 0.062745f, 0.968627f,
    0.035294f, 0.070588f, 0.964706f,
    0.039216f, 0.078431f, 0.960784f,
    0.043137f, 0.086275f, 0.956863f,
    0.047059f, 0.094118f, 0.952941f,
    0.050980f, 0.101961f, 0.949020f,
    0.054902f, 0.109804f, 0.945098f,
    0.058824f, 0.117647f, 0.941176f,
    0.062745f, 0.125490f, 0.937255f,
    0.066667f, 0.133333f, 0.933333f,
    0.070588f, 0.141176f, 0.929412f,
    0.074510f, 0.149020f, 0.925490f,
    0.078431f, 0.156863f, 0.921569f,
    0.082353f, 0.164706f, 0.917647f,
    0.086275f, 0.172549f, 0.913725f,
    0.090196f, 0.180392f, 0.909804f,
    0.094118f, 0.188235f, 0.905882f,
    0.098039f, 0.196078f, 0.901961f,
    0.101961f, 0.203922f, 0.898039f,
    0.105882f, 0.211765f, 0.894118f,
    0.109804f, 0.219608f, 0.890196f,
    0.113725f, 0.227451f, 0.886275f,
    0.117647f, 0.235294f, 0.882353f,
    0.121569f, 0.243137f, 0.878431f,
    0.125490f, 0.250980f, 0.874510f,
    0.129412f, 0.258824f, 0.870588f,
    0.133333f, 0.266667f, 0.866667f,
    0.137255f, 0.274510f, 0.862745f,
    0.141176f, 0.282353f, 0.858824f,
    0.145098f, 0.290196f, 0.854902f,
    0.149020f, 0.298039f, 0.850980f,
    0.152941f, 0.305882f, 0.847059f,
    0.156863f, 0.313725f, 0.843137f,
    0.160784f, 0.321569f, 0.839216f,
    0.164706f, 0.329412f, 0.835294f,
    0.168627f, 0.337255f, 0.831373f,
    0.172549f, 0.345098f, 0.827451f,
    0.176471f, 0.352941f, 0.823529f,
    0.180392f, 0.360784f, 0.819608f,
    0.184314f, 0.368627f, 0.815686f,
    0.188235f, 0.376471f, 0.811765f,
    0.192157f, 0.384314f, 0.807843f,
    0.196078f, 0.392157f, 0.803922f,
    0.200000f, 0.400000f, 0.800000f,
    0.203922f, 0.407843f, 0.796078f,
    0.207843f, 0.415686f, 0.792157f,
    0.211765f, 0.423529f, 0.788235f,
    0.215686f, 0.431373f, 0.784314f,
    0.219608f, 0.439216f, 0.780392f,
    0.223529f, 0.447059f, 0.776471f,
    0.227451f, 0.454902f, 0.772549f,
    0.231373f, 0.462745f, 0.768627f,
    0.235294f, 0.470588f, 0.764706f,
    0.239216f, 0.478431f, 0.760784f,
    0.243137f, 0.486275f, 0.756863f,
    0.247059f, 0.494118f, 0.752941f,
    0.250980f, 0.501961f, 0.749020f,
    0.254902f, 0.509804f, 0.745098f,
    0.258824f, 0.517647f, 0.741176f,
    0.262745f, 0.525490f, 0.737255f,
    0.266667f, 0.533333f, 0.733333f,
    0.270588f, 0.541176f, 0.729412f,
    0.274510f, 0.549020f, 0.725490f,
    0.278431f, 0.556863f, 0.721569f,
    0.282353f, 0.564706f, 0.717647f,
    0.286275f, 0.572549f, 0.713725f,
    0.290196f, 0.580392f, 0.709804f,
    0.294118f, 0.588235f, 0.705882f,
    0.298039f, 0.596078f, 0.701961f,
    0.301961f, 0.603922f, 0.698039f,
    0.305882f, 0.611765f, 0.694118f,
    0.309804f, 0.619608f, 0.690196f,
    0.313725f, 0.627451f, 0.686275f,
    0.317647f, 0.635294f, 0.682353f,
    0.321569f, 0.643137f, 0.678431f,
    0.325490f, 0.650980f, 0.674510f,
    0.329412f, 0.658824f, 0.670588f,
    0.333333f, 0.666667f, 0.666667f,
    0.337255f, 0.674510f, 0.662745f,
    0.341176f, 0.682353f, 0.658824f,
    0.345098f, 0.690196f, 0.654902f,
    0.349020f, 0.698039f, 0.650980f,
    0.352941f, 0.705882f, 0.647059f,
    0.356863f, 0.713725f, 0.643137f,
    0.360784f, 0.721569f, 0.639216f,
    0.364706f, 0.729412f, 0.635294f,
    0.368627f, 0.737255f, 0.631373f,
    0.372549f, 0.745098f, 0.627451f,
    0.376471f, 0.752941f, 0.623529f,
    0.380392f, 0.760784f, 0.619608f,
    0.384314f, 0.768627f, 0.615686f,
    0.388235f, 0.776471f, 0.611765f,
    0.392157f, 0.784314f, 0.607843f,
    0.396078f, 0.792157f, 0.603922f,
    0.400000f, 0.800000f, 0.600000f,
    0.403922f, 0.807843f, 0.596078f,
    0.407843f, 0.815686f, 0.592157f,
    0.411765f, 0.823529f, 0.588235f,
    0.415686f, 0.831373f, 0.584314f,
    0.419608f, 0.839216f, 0.580392f,
    0.423529f, 0.847059f, 0.576471f,
    0.427451f, 0.854902f, 0.572549f,
    0.431373f, 0.862745f, 0.568627f,
    0.435294f, 0.870588f, 0.564706f,
    0.439216f, 0.878431f, 0.560784f,
    0.443137f, 0.886275f, 0.556863f,
    0.447059f, 0.894118f, 0.552941f,
    0.450980f, 0.901961f, 0.549020f,
    0.454902f, 0.909804f, 0.545098f,
    0.458824f, 0.917647f, 0.541176f,
    0.462745f, 0.925490f, 0.537255f,
    0.466667f, 0.933333f, 0.533333f,
    0.470588f, 0.941176f, 0.529412f,
    0.474510f, 0.949020f, 0.525490f,
    0.478431f, 0.956863f, 0.521569f,
    0.482353f, 0.964706f, 0.517647f,
    0.486275f, 0.972549f, 0.513725f,
    0.490196f, 0.980392f, 0.509804f,
    0.494118f, 0.988235f, 0.505882f,
    0.498039f, 0.996078f, 0.501961f,
    0.501961f, 0.996078f, 0.498039f,
    0.505882f, 0.988235f, 0.494118f,
    0.509804f, 0.980392f, 0.490196f,
    0.513725f, 0.972549f, 0.486275f,
    0.517647f, 0.964706f, 0.482353f,
    0.521569f, 0.956863f, 0.478431f,
    0.525490f, 0.949020f, 0.474510f,
    0.529412f, 0.941176f, 0.470588f,
    0.533333f, 0.933333f, 0.466667f,
    0.537255f, 0.925490f, 0.462745f,
    0.541176f, 0.917647f, 0.458824f,
    0.545098f, 0.909804f, 0.454902f,
    0.549020f, 0.901961f, 0.450980f,
    0.552941f, 0.894118f, 0.447059f,
    0.556863f, 0.886275f, 0.443137f,
    0.560784f, 0.878431f, 0.439216f,
    0.564706f, 0.870588f, 0.435294f,
    0.568627f, 0.862745f, 0.431373f,
    0.572549f, 0.854902f, 0.427451f,
    0.576471f, 0.847059f, 0.423529f,
    0.580392f, 0.839216f, 0.419608f,
    0.584314f, 0.831373f, 0.415686f,
    0.588235f, 0.823529f, 0.411765f,
    0.592157f, 0.815686f, 0.407843f,
    0.596078f, 0.807843f, 0.403922f,
    0.600000f, 0.800000f, 0.400000f,
    0.603922f, 0.792157f, 0.396078f,
    0.607843f, 0.784314f, 0.392157f,
    0.611765f, 0.776471f, 0.388235f,
    0.615686f, 0.768627f, 0.384314f,
    0.619608f, 0.760784f, 0.380392f,
    0.623529f, 0.752941f, 0.376471f,
    0.627451f, 0.745098f, 0.372549f,
    0.631373f, 0.737255f, 0.368627f,
    0.635294f, 0.729412f, 0.364706f,
    0.639216f, 0.721569f, 0.360784f,
    0.643137f, 0.713725f, 0.356863f,
    0.647059f, 0.705882f, 0.352941f,
    0.650980f, 0.698039f, 0.349020f,
    0.654902f, 0.690196f, 0.345098f,
    0.658824f, 0.682353f, 0.341176f,
    0.662745f, 0.674510f, 0.337255f,
    0.666667f, 0.666667f, 0.333333f,
    0.670588f, 0.658824f, 0.329412f,
    0.674510f, 0.650980f, 0.325490f,
    0.678431f, 0.643137f, 0.321569f,
    0.682353f, 0.635294f, 0.317647f,
    0.686275f, 0.627451f, 0.313725f,
    0.690196f, 0.619608f, 0.309804f,
    0.694118f, 0.611765f, 0.305882f,
    0.698039f, 0.603922f, 0.301961f,
    0.701961f, 0.596078f, 0.298039f,
    0.705882f, 0.588235f, 0.294118f,
    0.709804f, 0.580392f, 0.290196f,
    0.713725f, 0.572549f, 0.286275f,
    0.717647f, 0.564706f, 0.282353f,
    0.721569f, 0.556863f, 0.278431f,
    0.725490f, 0.549020f, 0.274510f,
    0.729412f, 0.541176f, 0.270588f,
    0.733333f, 0.533333f, 0.266667f,
    0.737255f, 0.525490f, 0.262745f,
    0.741176f, 0.517647f, 0.258824f,
    0.745098f, 0.509804f, 0.254902f,
    0.749020f, 0.501961f, 0.250980f,
    0.752941f, 0.494118f, 0.247059f,
    0.756863f, 0.486275f, 0.243137f,
    0.760784f, 0.478431f, 0.239216f,
    0.764706f, 0.470588f, 0.235294f,
    0.768627f, 0.462745f, 0.231373f,
    0.772549f, 0.454902f, 0.227451f,
    0.776471f, 0.447059f, 0.223529f,
    0.780392f, 0.439216f, 0.219608f,
    0.784314f, 0.431373f, 0.215686f,
    0.788235f, 0.423529f, 0.211765f,
    0.792157f, 0.415686f, 0.207843f,
    0.796078f, 0.407843f, 0.203922f,
    0.800000f, 0.400000f, 0.200000f,
    0.803922f, 0.392157f, 0.196078f,
    0.807843f, 0.384314f, 0.192157f,
    0.811765f, 0.376471f, 0.188235f,
    0.815686f, 0.368627f, 0.184314f,
    0.819608f, 0.360784f, 0.180392f,
    0.823529f, 0.352941f, 0.176471f,
    0.827451f, 0.345098f, 0.172549f,
    0.831373f, 0.337255f, 0.168627f,
    0.835294f, 0.329412f, 0.164706f,
    0.839216f, 0.321569f, 0.160784f,
    0.843137f, 0.313725f, 0.156863f,
    0.847059f, 0.305882f, 0.152941f,
    0.850980f, 0.298039f, 0.149020f,
    0.854902f, 0.290196f, 0.145098f,
    0.858824f, 0.282353f, 0.141176f,
    0.862745f, 0.274510f, 0.137255f,
    0.866667f, 0.266667f, 0.133333f,
    0.870588f, 0.258824f, 0.129412f,
    0.874510f, 0.250980f, 0.125490f,
    0.878431f, 0.243137f, 0.121569f,
    0.882353f, 0.235294f, 0.117647f,
    0.886275f, 0.227451f, 0.113725f,
    0.890196f, 0.219608f, 0.109804f,
    0.894118f, 0.211765f, 0.105882f,
    0.898039f, 0.203922f, 0.101961f,
    0.901961f, 0.196078f, 0.098039f,
    0.905882f, 0.188235f, 0.094118f,
    0.909804f, 0.180392f, 0.090196f,
    0.913725f, 0.172549f, 0.086275f,
    0.917647f, 0.164706f, 0.082353f,
    0.921569f, 0.156863f, 0.078431f,
    0.925490f, 0.149020f, 0.074510f,
    0.929412f, 0.141176f, 0.070588f,
    0.933333f, 0.133333f, 0.066667f,
    0.937255f, 0.125490f, 0.062745f,
    0.941176f, 0.117647f, 0.058824f,
    0.945098f, 0.109804f, 0.054902f,
    0.949020f, 0.101961f, 0.050980f,
    0.952941f, 0.094118f, 0.047059f,
    0.956863f, 0.086275f, 0.043137f,
    0.960784f, 0.078431f, 0.039216f,
    0.964706f, 0.070588f, 0.035294f,
    0.968627f, 0.062745f, 0.031373f,
    0.972549f, 0.054902f, 0.027451f,
    0.976471f, 0.047059f, 0.023529f,
    0.980392f, 0.039216f, 0.019608f,
    0.984314f, 0.031373f, 0.015686f,
    0.988235f, 0.023529f, 0.011765f,
    0.992157f, 0.015686f, 0.007843f,
    0.996078f, 0.007843f, 0.003922f,
    1.000000f, 0.000000f, 0.000000f
};
*/

#endif // SHADER_H
